version: "3.4"
volumes:
  astro_node_modules:
  cache:
    driver: local
services:
  web:
    image: nginx
    restart: on-failure
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 7800:7800
    depends_on:
      - ui
      - api
    command: [nginx-debug, '-g', 'daemon off;']

  ui:
    build: ui
    image: ui
    restart: "no"
    volumes:
      - ./ui/:/app
      - astro_node_modules:/app/node_modules
    ports:
      - 7778:7778
    depends_on:
      - api
    env_file:
      - project.env

  api:
    build: api
    image: api
    restart: "no"
    volumes:
      - ./api/:/app
    ports:
      - 7777:7777
    #command: ./wait-for-it.sh rabbitmq:5672 -t 60
    depends_on:
      - database
      - flyway
      - rabbitmq
    env_file:
      - project.env

  database:
    container_name: dab-p3-database-eca927f4-b000-4091-8075-1d76c43f7a04
    image: postgres:14.1
    restart: "no"
    env_file:
      - project.env

  flyway:
    image: flyway/flyway:8.4.0-alpine
    depends_on:
      - database
    volumes:
      - .:/flyway/sql
    command: -connectRetries=60 -baselineOnMigrate=true migrate
    env_file:
      - project.env
  ws-messaging-service:
    build: ws-messaging-service
    image: ws-messaging-service
    restart: "no"
    volumes:
      - ./ws-messaging-service/:/app
    depends_on:
      - api
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: rabbitmq
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
  messaging:
    build: messaging-service
    image: messaging-service
    restart: "no"
    depends_on:
      - database
      - flyway
      - rabbitmq
    env_file:
      - project.env
